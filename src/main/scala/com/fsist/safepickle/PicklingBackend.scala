package com.fsist.safepickle

import PicklingBackend.DefaultPicklers

import scala.language.experimental.macros

/** A marker trait for pickling backend implementations, allowing them to be distinguished at the type level.
  * Also serves as a factory for Reader and Writer instances.
  * 
  * Note: this requires implementations to be singletons, because `this.type` is used to parameterize the Reader and Writer
  * instances returned.
  */
trait PicklingBackend {
  /** The type of the pickled form used by this backend. */
  type Repr
  
  type PickleReader <: Reader[this.type]
  type PickleWriter <: Writer[Repr, this.type]
  
  /** Creates a new Reader that will read produce the values encoded in `repr` */
  def reader(repr: Repr): PickleReader
  
  def writer(): PickleWriter

  /** An object containing the implicit picklers for this backend. Should always contain at least `PicklingBackend.DefaultPicklers`.
    *
    * To use any particular backend, start with `import backend.Picklers._`. */
  val picklers : DefaultPicklers = new DefaultPicklers {}
}

object PicklingBackend {
  /** The default backend-neutral picklers. */
  trait DefaultPicklers extends PrimitivePicklers with CollectionPicklers {
  }

  /** Autogenerate a Pickler. See the documentation in the project's README.md.
    *
    * By placing this here and not in the DefaultPicklers cake, we give it a lower priority in implicits resolution,
    * so any explicitly defined implicits take precedence over the macro.
    */
  implicit def autogenerated[T, Backend <: PicklingBackend]: Pickler[T, Backend] = macro Autogen.generate[T, Backend]
}
